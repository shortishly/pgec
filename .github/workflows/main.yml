---
on:
  push:
    branches:
      - main
      - develop
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
env:
  otp_version: '25.1'
  registry: 'ghcr.io'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup BEAM
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{env.otp_version}}
      - name: Build
        run: make deps app dialyze eunit
      - name: PostgreSQL wal_level = logical
        run: |
          sudo pg_conftool set wal_level logical
      - name: Start and wait for PostgreSQL service
        run: |
          sudo systemctl start postgresql.service
          pg_isready
      - name: Create PostgreSQL ci user
        run: >-
          sudo -u postgres psql
          --command="create user ci password 'ci' superuser replication"
      - name: Common Test
        run: make ct
        env:
          PGMP_PGMP_REPLICATION_ENABLED: false
          PGMP_DATABASE_USER: ci
          PGMP_DATABASE_NAME: postgres
          PGMP_DATABASE_PASSWORD: ci
          PGEC_HTTP_PORT: 8080
      - uses: actions/upload-artifact@v3
        with:
          name: ct-logs
          path: logs
      - name: Beam Docker Release
        id: bdr
        uses: shortishly/beam-docker-release-action@b55d4eb90a31e72e8917c6a28e1fb3d2f835d13c
        with:
          registry: ${{env.registry}}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
          build-image: erlang:${{env.otp_version}}
          build-platforms: linux/amd64
          image-description: >-
            pgec is a real-time in memory database replication cache,
            with a memcached and REST API.
          image-licenses: Apache-2.0
      - run: echo ${{steps.bdr.outputs.imageid}}
        name: imageid
      - run: echo ${{steps.bdr.outputs.digest}}
        name: digest
      - run: echo ${{steps.bdr.outputs.metadata}}
        name: metadata
      - name: Vulnerability Scan
        uses: snyk/actions/docker@0.3.0
        env:
          SNYK_TOKEN: ${{secrets.SNYK_TOKEN}}
        with:
          image: ${{env.DOCKER_IMAGE_TAGS}}
