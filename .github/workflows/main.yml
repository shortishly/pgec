---
on:
  push:
    branches:
      - main
      - develop
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
env:
  REGISTRY: 'ghcr.io'
jobs:
  build:
    strategy:
      matrix:
        otp:
          - 26
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{matrix.otp}}
      - run: make deps app dialyze eunit
  test:
    needs: build
    strategy:
      matrix:
        otp:
          - 26
        pg:
          - 'postgres:14'
          - 'postgres:15'
          - 'postgres:16beta2'
          - 'postgis/postgis:15-3.3'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{matrix.otp}}
      - run: >-
          docker-compose
          --file etc/github-ci/compose.yaml
          --project-directory etc/github-ci
          up
          --detach
        env:
          POSTGRES_IMAGE: ${{matrix.pg}}
      - run: make ct
        env:
          PGMP_PGMP_REPLICATION_ENABLED: false
          PGMP_DATABASE_USER: postgres
          PGMP_DATABASE_NAME: postgres
          PGMP_DATABASE_PASSWORD: postgres
      - run: |
          echo MATRIX_OTP="${{matrix.otp}}" >> $GITHUB_ENV
          echo MATRIX_PG="${{matrix.pg}}" >> $GITHUB_ENV
          echo ARTIFACT_NAME="ct-logs-otp-${MATRIX_OTP}-pg-${MATRIX_PG//[:\/]/-}" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v3
        with:
          name: ${{env.ARTIFACT_NAME}}
          path: _site/ct
  package:
    needs: test
    permissions:
      packages: write
    strategy:
      matrix:
        otp:
          - 26
    runs-on: ubuntu-latest
    outputs:
      image: ${{steps.bdra.outputs.image}}
      tags: ${{steps.bdra.outputs.tags}}
    steps:
      - uses: shortishly/beam-docker-release-action@main
        id: bdra
        with:
          registry: ${{env.REGISTRY}}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
          build-image: erlang:${{matrix.otp}}
          image-description: >-
            pgec is a real-time in memory database replication cache,
            with a memcached and REST API.
          image-licenses: Apache-2.0
  security-scan-container:
    needs: package
    runs-on: ubuntu-latest
    steps:
      - uses: snyk/actions/docker@0.4.0
        env:
          SNYK_TOKEN: ${{secrets.SNYK_TOKEN}}
        with:
          image: ${{needs.package.outputs.image}}:${{needs.package.outputs.tags}}
  smoke-test:
    needs: package
    strategy:
      matrix:
        otp:
          - 26
        pg:
          - 'postgres:15'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: >-
          docker compose
          --profile all
          up
          --detach
          --remove-orphans
        env:
          POSTGRES_IMAGE: ${{matrix.pg}}
          PGEC_IMAGE: ${{needs.package.outputs.image}}
          PGEC_VERSION: ${{needs.package.outputs.tags}}
      - run: |
          sudo su -
          apt-get update
          apt-get install -y redis-tools netcat bats
          update-alternatives --set nc /bin/nc.traditional
      - run: |
          bats test/bats
